window.addEventListener('DOMContentLoaded', async function() {
    const gameId = localStorage.getItem('selectedGameId');
    if (!gameId) {
        document.body.innerHTML = "<p>No se seleccion√≥ ning√∫n juego.</p>";
        return;
    }

    // Llama a tu backend para obtener detalles del juego
    const response = await fetch(`/game?id=${encodeURIComponent(gameId)}`);
    if (response.ok) {
        const game = await response.json();

        // Imagen
        document.getElementById('gameImage').src = game.background_image || 'images/img.jpeg';
        document.getElementById('gameImage').alt = game.name || 'Juego';

        // T√≠tulo y a√±o
        document.getElementById('gameTitle').innerHTML = `${game.name || ''} <span class="year">${(game.released || '').split('-')[0] || ''}</span>`;

        // Tags
        const tagsContainer = document.getElementById('gameTags');
        tagsContainer.innerHTML = '';
        if (game.tags && game.tags.length > 0) {
            game.tags.slice(0, 5).forEach(tag => {
                const span = document.createElement('span');
                span.className = 'tag';
                span.textContent = tag.name;
                tagsContainer.appendChild(span);
            });
        }

        // Plataformas
        document.getElementById('gamePlatforms').textContent = "Plataformas: " + (game.platforms ? game.platforms.map(p => p.platform.name).join(', ') : '');

        // Desarrolladores
        document.getElementById('gameDevelopers').textContent = "Desarrollador: " + (game.developers ? game.developers.map(d => d.name).join(', ') : '');

        // Sinopsis
        document.getElementById('gameSynopsis').textContent = game.description_raw || '';

        // Rating y reviews
        document.getElementById('gameRating').textContent = `‚ú∞ ${game.rating || 0}`;
        document.getElementById('gameReviews').textContent = `üí¨ ${game.reviews_count || 0}`;

        // Estrellas (rating visual)
        const stars = document.getElementById('gameStars');
        stars.innerHTML = '';
        const rating = Math.round(game.rating || 0);
        for (let i = 0; i < 5; i++) {
            stars.innerHTML += i < rating ? '‚≠ê' : '‚ú∞';
        }
        cargarRese√±as(gameId);
    } else {
        document.body.innerHTML = "<p>Error al cargar los detalles del juego.</p>";
    }
});



// Referencias a los elementos
// Obtener elementos del HTML
async function agregarRese√±a() {
  const contenedor = document.getElementById('reviewList');
    const reviewTextarea = document.getElementById('reviewText');
  const texto = document.getElementById('reviewText').value.trim();
  let gameIdString = localStorage.getItem('selectedGameId');
  const gameId = parseInt(gameIdString, 10);

  if (texto === "") {
    alert("No pod√©s publicar una rese√±a vac√≠a.");
    return;
  }

  const datosRese√±a = {
    texto: texto,
    juego: gameId,
    
  }

      try {
        // 4. Solicitud POST al backend (ASP.NET Core)
        const response = await fetch('review', {
            method: 'POST',
            // No necesitas credenciales extra; la Cookie se env√≠a autom√°ticamente
            headers: {
                'Content-Type': 'application/json' 
            },
            body: JSON.stringify(datosRese√±a) 
        });

        // 5. Manejar la respuesta
        if (response.ok) {
            // El servidor respondi√≥ 200/201. Deber√≠a devolver la rese√±a completa.
            const rese√±aGuardada = await response.json(); 
            
            // 6. Actualizar el DOM con los datos confirmados del servidor
            mostrarRese√±aEnDOM(rese√±aGuardada.texto, rese√±aGuardada.fecha, rese√±aGuardada.usuario);
            
            // Limpiar textarea
            reviewTextarea.value = "";
            
        } else if (response.status === 401) {
            alert("Debes iniciar sesi√≥n para publicar una rese√±a.");
        } else {
            // Manejar otros errores (400, 500, etc.)
            alert("Error al guardar la rese√±a en el servidor.");
        }

    } catch (error) {
        console.error('Error de conexi√≥n o de red:', error);
        alert("No se pudo conectar con el servidor. Int√©ntalo m√°s tarde.");
    }
}

function mostrarRese√±aEnDOM(texto, fecha, usuario) {
    const contenedor = document.getElementById('reviewList');
    
    // Formatear la fecha recibida del servidor (que viene como string ISO)
    const fechaHora = new Date(fecha);
    const fechaTexto = fechaHora.toLocaleDateString();
    const horaTexto = fechaHora.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const fechaHoraTexto = `${fechaTexto} ${horaTexto}`;

    const nuevaRese√±a = document.createElement('div');
    nuevaRese√±a.classList.add('review');

    nuevaRese√±a.innerHTML = `
        <p class="review-text">${texto}</p>
        <div class="review-footer">
            <span class="review-date">Publicado por ${usuario} el ${fechaHoraTexto}</span>
        </div>
    `;

    // Insertar al inicio o al final (depende de tu dise√±o)
    contenedor.appendChild(nuevaRese√±a); 
}

async function cargarRese√±as(gameID) {
    try {
        const response = await fetch(`/cargarReviews?gameId=${encodeURIComponent(gameID)}`);
        
        if (response.ok) {
            const rese√±as = await response.json();
            
            // üí° 1. Limpiar el contenedor antes de cargar nuevas rese√±as (opcional)
            const contenedor = document.getElementById('reviewList');
            contenedor.innerHTML = ''; 

            // üí° 2. Iterar sobre la lista de rese√±as recibidas
            rese√±as.forEach(rese√±a => {
                mostrarRese√±aEnDOM(rese√±a.Texto, rese√±a.Fecha, rese√±a.Usuario);
            });

        } else if (response.status === 404) {
            console.warn("No se encontraron rese√±as para este juego.");
            // Podr√≠as mostrar un mensaje de "S√© el primero en comentar"
        } else {
            console.error(`Error al cargar rese√±as: ${response.status}`);
        }

    } catch (error) {
        console.error('Error de red al intentar cargar las rese√±as:', error);
    }
}